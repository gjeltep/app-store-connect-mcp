name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  id-token: write

jobs:
  build-and-validate:
    name: Build and Validate
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.tag_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Extract version from tag
        id: version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $TAG_VERSION"

      - name: Verify version in pyproject.toml matches tag
        run: |
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          TAG_VERSION=${{ steps.version.outputs.tag_version }}
          echo "pyproject.toml version: $PYPROJECT_VERSION"
          echo "Git tag version: $TAG_VERSION"
          if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "ERROR: Version mismatch!"
            echo "pyproject.toml has version $PYPROJECT_VERSION but tag is v$TAG_VERSION"
            exit 1
          fi
          echo "Version check passed: $PYPROJECT_VERSION"

      - name: Verify version in server.json matches tag
        run: |
          JSON_VERSION=$(grep '"version":' server.json | head -1 | sed 's/.*"version": "\(.*\)".*/\1/')
          TAG_VERSION=${{ steps.version.outputs.tag_version }}
          echo "server.json version: $JSON_VERSION"
          echo "Git tag version: $TAG_VERSION"
          if [ "$JSON_VERSION" != "$TAG_VERSION" ]; then
            echo "ERROR: Version mismatch!"
            echo "server.json has version $JSON_VERSION but tag is v$TAG_VERSION"
            exit 1
          fi
          echo "Version check passed: $JSON_VERSION"

      - name: Validate server.json
        run: |
          uv run --with jsonschema --with httpx python scripts/validate_server_json.py

      - name: Build package
        run: uv build

      - name: Check build artifacts for sensitive files
        run: |
          echo "=== Checking sdist contents ==="
          tar -tzf dist/*.tar.gz | tee /tmp/sdist-contents.txt
          if grep -E "\.env$|\.p8$" /tmp/sdist-contents.txt; then
            echo "ERROR: Found sensitive files in sdist!"
            exit 1
          fi

          echo "=== Checking wheel contents ==="
          unzip -l dist/*.whl | tee /tmp/wheel-contents.txt
          if grep -E "\.env$|\.p8$" /tmp/wheel-contents.txt; then
            echo "ERROR: Found sensitive files in wheel!"
            exit 1
          fi

          echo "✓ Build artifacts are clean - no sensitive files found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  publish-pypi:
    name: Publish to PyPI
    needs: build-and-validate
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish_status.outputs.published }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Check if version exists on PyPI
        id: pypi_check
        run: |
          VERSION="${{ needs.build-and-validate.outputs.version }}"
          if curl -sSf "https://pypi.org/pypi/app-store-connect-mcp/$VERSION/json" > /dev/null 2>&1; then
            echo "Version $VERSION already exists on PyPI"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION does not exist on PyPI"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to PyPI
        if: steps.pypi_check.outputs.exists == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

      - name: Skip PyPI publish
        if: steps.pypi_check.outputs.exists == 'true'
        run: |
          echo "⏭️  Skipping PyPI publish - version ${{ needs.build-and-validate.outputs.version }} already exists"

      - name: Set publish status
        id: publish_status
        if: always()
        run: |
          # Mark as published if either we just published OR it already existed
          if [[ "${{ steps.pypi_check.outputs.exists }}" == "true" ]] || [[ "${{ steps.pypi_check.outputs.exists }}" == "false" && "${{ job.status }}" == "success" ]]; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "✅ PyPI package is available"
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "❌ PyPI package is NOT available"
          fi

  publish-mcp:
    name: Publish to MCP Registry
    needs: [build-and-validate, publish-pypi]
    runs-on: ubuntu-latest
    if: needs.publish-pypi.outputs.published == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install MCP Publisher
        run: |
          curl -L "https://github.com/modelcontextprotocol/registry/releases/latest/download/mcp-publisher_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz" | tar xz mcp-publisher

      - name: Login to MCP Registry
        run: ./mcp-publisher login github-oidc

      - name: Publish to MCP Registry
        run: ./mcp-publisher publish

  create-release:
    name: Create GitHub Release
    needs: [build-and-validate, publish-pypi, publish-mcp]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          body: |
            ## Installation

            ```bash
            pip install app-store-connect-mcp==${{ needs.build-and-validate.outputs.version }}
            ```

            ## What's Changed
            See auto-generated release notes below.

            ## Links
            - **PyPI**: https://pypi.org/project/app-store-connect-mcp/${{ needs.build-and-validate.outputs.version }}/
            - **MCP Registry**: https://registry.modelcontextprotocol.io